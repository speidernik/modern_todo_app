rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if user is a participant in a chat
    function isParticipant() {
      return resource.data.participants is list
        && request.auth != null
        && request.auth.uid in resource.data.participants;
    }

    // Helper function to check if user is a participant when creating a chat
    function isParticipantOnCreate() {
      return request.resource.data.participants is list
        && request.auth != null
        && request.auth.uid in request.resource.data.participants;
    }

    // Helper function to validate settings data
    function isValidSettingsData(data) {
      return data.keys().hasAll(['themeMode', 'locale'])
        && data.themeMode is string
        && (data.themeMode in ['system', 'light', 'dark'])
        && (data.locale == null || (data.locale is string && data.locale in ['en', 'de', 'es']));
    }

    // Helper function to validate username
    function isValidUsername(username) {
      return username is string
        && username.size() >= 3
        && username.size() <= 30
        && username.matches('^[a-zA-Z0-9_]+$');
    }

    // Helper function to validate user profile
    function isValidUserProfile(data) {
      return data.keys().hasAll(['username', 'email'])
        && isValidUsername(data.username)
        && data.email is string
        && data.email.matches('^[^@]+@[^@]+\\.[^@]+$');
    }

    // Helper function to validate account settings
    function isValidAccountSettings(data) {
      return data.keys().hasAll(['username', 'email'])
        && isValidUsername(data.username)
        && data.email is string
        && data.email.matches('^[^@]+@[^@]+\\.[^@]+$');
    }

    // User profile and FCM token
    match /users/{userId} {
      // Allow reading own profile with full access
      allow read: if isAuthenticated() && isOwner(userId);
      // Allow reading other users' basic profile info (username) for chat avatars
      allow read: if isAuthenticated() && request.auth.uid != userId;
      allow create: if isAuthenticated() 
        && isOwner(userId)
        && isValidUserProfile(request.resource.data);
      allow update: if isAuthenticated() 
        && isOwner(userId)
        && isValidUserProfile(request.resource.data);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Rules for user's todos collection
    match /users/{userId}/todos/{todoId} {
      // Allow read if user is authenticated and owns the document
      allow read: if isAuthenticated() && isOwner(userId);
      
      // Allow create if user is authenticated, owns the document, and data is valid
      allow create: if isAuthenticated() 
        && isOwner(userId)
        && request.resource.data.keys().hasAll(['id', 'title', 'description', 'isCompleted', 'createdAt'])
        && request.resource.data.title is string
        && request.resource.data.title.size() > 0
        && request.resource.data.description is string
        && request.resource.data.isCompleted is bool
        && request.resource.data.createdAt is timestamp;
      
      // Allow update if user is authenticated, owns the document, and update is valid
      allow update: if isAuthenticated() 
        && isOwner(userId)
        && request.resource.data.diff(resource.data).affectedKeys()
            .hasAny(['title', 'description', 'isCompleted', 'dueDate'])
        && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['id', 'createdAt']));
      
      // Allow delete if user is authenticated and owns the document
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Rules for user's settings collection
    match /users/{userId}/settings/{settingId} {
      // Allow read if user is authenticated and owns the document
      allow read: if isAuthenticated() && isOwner(userId);
      
      // Allow create and update if user is authenticated, owns the document, and data is valid
      allow create, update: if isAuthenticated() 
        && isOwner(userId)
        && isValidSettingsData(request.resource.data);
      
      // Allow delete if user is authenticated and owns the document
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // User's account settings
    match /users/{userId}/account_settings/{settingId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create, update: if isAuthenticated() 
        && isOwner(userId)
        && isValidAccountSettings(request.resource.data);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Global chat: allow all authenticated users
    match /chats/global/messages/{messageId} {
      allow read, create: if isAuthenticated();
      allow update, delete: if false;
    }

    // Chats (1-to-1 and group) - legacy, not used for global
    match /chats/{chatId} {
      allow create: if isAuthenticated() && isParticipantOnCreate();
      allow read, update, delete: if isAuthenticated() && isParticipant();
      match /messages/{messageId} {
        allow create, read: if isAuthenticated() && isParticipant();
        allow update, delete: if false;
      }
    }

    // Deny access to all other documents by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 